name: "Release"

on:
  pull_request:
    types:
      - "ready_for_review"
      - "review_requested"
    paths:
      - ".github/workflows/release.yaml"
      - "files/scripts/os-release.sh"
  push:
    branches:
      - "main"

jobs:
  get_trigger:
    name: "Get workflow trigger"
    runs-on: "ubuntu-latest"

    outputs:
      is_runnable: "${{ steps.get_trigger.outputs.is_runnable }}"

    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683" # v4.2.2

      - name: "Get workflow trigger"
        id: "get_trigger"
        env:
          GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          RELEASE_TAG_NAME: "Type: Release"
          REPOSITORY: "${{ github.repository }}"
        run: |
          set -o "errexit" -o "nounset"

          echo "event_name=${{ github.event_name }}"

          # Trigger が `pull_request` の場合、実行可能。
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            IS_RUNNABLE="true"
            echo "is_runnable=${IS_RUNNABLE}" | tee --append "${GITHUB_OUTPUT}"
            exit 0
          fi

          # Trigger が `push` の場合、紐づく Pull Request の Label に
          # `Type: Release` が含まれている場合のみ実行可能。
          if [[ "${{ github.event_name }}" == "push" ]]; then
            set +o "errexit"
            PR_NUMBER=$(
              git log --format="%s" --max-count=1 \
              | grep --perl-regexp --only-matching "(?<=\(#)\d+(?=\)$)"
            )
            set -o "errexit"
            if [[ -z "${PR_NUMBER}" ]]; then
              IS_RUNNABLE="false"
              echo "is_runnable=${IS_RUNNABLE}" | tee --append "${GITHUB_OUTPUT}"
              exit 0
            fi

            set +o "errexit"
            MATCHED_PR_LABEL=$(
              gh pr view "${PR_NUMBER}" \
                --repo="${REPOSITORY}" \
                --json="labels" \
                --jq=".labels // empty | .[].name" \
              | grep "${RELEASE_TAG_NAME}"
            )
            set -o "errexit"

            if [[ "${MATCHED_PR_LABEL}" == "${RELEASE_TAG_NAME}" ]]; then
              IS_RUNNABLE="true"
              echo "is_runnable=${IS_RUNNABLE}" | tee --append "${GITHUB_OUTPUT}"
              exit 0
            fi
          fi

          IS_RUNNABLE="false"
          echo "is_runnable=${IS_RUNNABLE}" | tee --append "${GITHUB_OUTPUT}"

  check_release_version:
    name: "Check release version"
    needs: "get_trigger"
    if: ${{ fromJson(needs.get_trigger.outputs.is_runnable) }}
    runs-on: "ubuntu-latest"

    outputs:
      current_version: "${{ steps.check_version.outputs.current_version }}"

    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683" # v4.2.2

      - name: "Check release version"
        id: "check_version"
        env:
          GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          REPOSITORY: "${{ github.repository }}"
        run: |
          set -o "errexit" -o "nounset"

          CURRENT_VERSION="v$(
            grep "^RELEASE_VERSION" ./files/scripts/update-os-release.sh \
            | sed --expression="s/^.*=//g" --expression="s/\"//g"
          )"
          echo "current_version=${CURRENT_VERSION}" | tee --append "${GITHUB_OUTPUT}"

          set +o "errexit"
          MATCHED_EXIST_VERSION=$(
            gh release list \
              --repo="${REPOSITORY}" \
              --json="tagName" \
              --jq=".[].tagName" \
            | grep "${CURRENT_VERSION}"
          )
          set -o "errexit"

          if [[ "${MATCHED_EXIST_VERSION}" == "${CURRENT_VERSION}" ]]; then
            echo "::error title=Invalid image version::Version ${CURRENT_VERSION} is already released."
            exit 1
          fi

          echo "::notice title=Valid image version::Version ${CURRENT_VERSION} is valid version."

  release:
    name: "Release"
    needs: "check_release_version"
    if: ${{ github.event_name == 'push' }}
    runs-on: "ubuntu-latest"

    permissions:
      contents: "write"

    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683" # v4.2.2

      - name: "Create release"
        env:
          CURRENT_VERSION: "${{ needs.check_release_version.outputs.current_version }}"
          GH_TOKEN: "${{ secrets.GH_WORKFLOW_PAT }}"
          REPOSITORY: "${{ github.repository }}"
        run: |
          set -o "errexit" -o "nounset"

          gh release create "${CURRENT_VERSION}" \
            --repo="${REPOSITORY}" \
            --generate-notes
