name: "Build (Internal image)"

on:
  pull_request:
    types:
      - "ready_for_review"
      - "review_requested"
    paths:
      - ".github/workflows/build-internal-image.yaml"
      - "containers/**/*"
  push:
    branches:
      - "main"
    paths:
      - "containers/**/*"
  workflow_dispatch:
    inputs:
      info:
        description: "Reasons for starting the workflow."
        required: true

concurrency:
  group: "${{ github.workflow }}-${{ github.ref || github.run_id }}"
  cancel-in-progress: true

jobs:
  get_target:
    name: "Get build target"
    runs-on: "ubuntu-latest"

    outputs:
      images: "${{ steps.get_images.outputs.images }}"

    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8" # v5.0.0
        with:
          fetch-depth: 0

      - name: "Get modified images"
        id: "get_images"
        run: |
          set -o "errexit" -o "nounset"

          # get compare target
          COMPARE_TARGET="origin/main"
          if [[ "${{ github.event_name }}" == "push" ]]; then
            COMPARE_TARGET="HEAD~1"
          fi

          # get modified images list
          MODIFIED_IMAGES=$(
            git diff --name-status "${COMPARE_TARGET}" "HEAD" \
            | grep "containers/*" \
            | grep --invert-match "^D" \
            | cut --fields="2" \
            | cut --delimiter="/" --fields="2" \
            | uniq \
            | jq --null-input --raw-input --compact-output "[inputs]"
          )
          IMAGES=$(
            find containers -mindepth 1 -maxdepth 1 -type "d" \
            | cut --delimiter="/" --fields="2" \
            | jq --null-input --raw-input --compact-output "[inputs]"
          )
          echo "images=${MODIFIED_IMAGES/[]/${IMAGES}}" | tee --append "${GITHUB_OUTPUT}"

  build:
    name: "Build (${{ matrix.image }}, ${{ matrix.platform }})"
    needs: "get_target"
    runs-on: "${{ matrix.runner }}"

    permissions:
      attestations: "write"
      id-token: "write"
      packages: "write"

    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.get_target.outputs.images) }}
        include:
          - platform: "linux/amd64"
            runner: "ubuntu-latest"

    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8" # v5.0.0

      - name: "Setup Docker Buildx"
        uses: "docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435" # v3.11.1
        with:
          install: true

      - name: "Setup cosign cli"
        uses: "sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159" # v3.9.2
        with:
          install-dir: "${{ runner.temp }}/cosign/bin"

      - name: "Validate cosign key-pair"
        if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && (github.event.pull_request.user.login == github.event.repository.owner.login)) }}
        env:
          COSIGN_PASSWORD: "${{ secrets.COSIGN_PASSWORD }}"
          COSIGN_PRIVATE_KEY: "${{ secrets.COSIGN_PRIVATE_KEY }}"
          COSIGN_YES: "true"
        run: |
          set -o "errexit" -o "nounset"

          cosign public-key --key="env://COSIGN_PRIVATE_KEY" > cosign.pub
          if [[ $(git diff --name-only | grep "cosign.pub") -gt 0 ]]; then
            echo "::error title=Invalid cosign key::Failed to validate cosign key pair."
            exit 1
          fi

      - name: "Login to GitHub Container Registry"
        uses: "docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef" # v3.6.0
        with:
          registry: "ghcr.io"
          username: "${{ github.repository_owner }}"
          password: "${{ secrets.GITHUB_TOKEN }}"

      - name: "Get image metadata"
        id: "get_metadata"
        run: |
          set -o "errexit" -o "nounset"
          cd ./containers/${{ matrix.image }}

          # image metadata
          IMAGE_METADATA=$(jq --compact-output --raw-output "." ./meta.json)
          echo "image_metadata=${IMAGE_METADATA}" | tee --append "${GITHUB_OUTPUT}"

          # image version
          ## major version
          _IMAGE_MAJOR_VERSION=$(
            grep "^ARG BUILDER_VERSION=" ./Containerfile \
            | sed --expression="s/^.*=//g"
          )
          ## minor version
          _IMAGE_MINOR_VERSION=$(
            date "+%Y%m%d"
          )
          ## patch version
          _REPOSITORY_OWNER="${{ github.repository_owner }}"
          _IMAGE_NAME=$(jq --raw-output '.["org.opencontainers.image.title"]' ./meta.json)
          _IMAGE_URL="ghcr.io/${_REPOSITORY_OWNER,,}/${_IMAGE_NAME}"
          set +o "errexit"
          _IMAGE_PATCH_VERSION=$(
            _PREFIX=$(
              skopeo list-tags "docker://${_IMAGE_URL}" \
              | jq --raw-output ".Tags[]" \
              | grep "^${_IMAGE_MAJOR_VERSION}.${_IMAGE_MINOR_VERSION}." \
              | sort --reverse \
              | head --lines="1" \
              | cut --delimiter="." --fields="3" \
              | xargs --replace="@" expr @ + 1
            )
            echo "${_PREFIX:-0}"
          )
          set -o "errexit"
          IMAGE_VERSION="${_IMAGE_MAJOR_VERSION}.${_IMAGE_MINOR_VERSION}.${_IMAGE_PATCH_VERSION}"
          echo "image_major_version=${_IMAGE_MAJOR_VERSION}" | tee --append "${GITHUB_OUTPUT}"
          echo "image_version=${IMAGE_VERSION}" | tee --append "${GITHUB_OUTPUT}"

      - name: "Build metadata"
        id: "build_metadata"
        uses: "docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f" # v5.8.0
        with:
          images: |-
            ghcr.io/${{ github.repository_owner }}/${{ fromJson(steps.get_metadata.outputs.image_metadata)['org.opencontainers.image.title'] }}
          tags: |-
            type=raw,value=${{ steps.get_metadata.outputs.image_version }}
            type=raw,value=${{ steps.get_metadata.outputs.image_major_version }}
            type=raw,value=latest
          labels: |-
            org.opencontainers.image.authors=${{ fromJson(steps.get_metadata.outputs.image_metadata)['org.opencontainers.image.authors'] }}
            org.opencontainers.image.url=${{ fromJson(steps.get_metadata.outputs.image_metadata)['org.opencontainers.image.url'] }}
            org.opencontainers.image.documentation=${{ fromJson(steps.get_metadata.outputs.image_metadata)['org.opencontainers.image.documentation'] }}
            org.opencontainers.image.source=${{ fromJson(steps.get_metadata.outputs.image_metadata)['org.opencontainers.image.source'] }}
            org.opencontainers.image.licenses=${{ fromJson(steps.get_metadata.outputs.image_metadata)['org.opencontainers.image.licenses'] }}
            org.opencontainers.image.title=${{ fromJson(steps.get_metadata.outputs.image_metadata)['org.opencontainers.image.title'] }}
            org.opencontainers.image.description=${{ fromJson(steps.get_metadata.outputs.image_metadata)['org.opencontainers.image.description'] }}
          annotations: |-
            org.opencontainers.image.authors=${{ fromJson(steps.get_metadata.outputs.image_metadata)['org.opencontainers.image.authors'] }}
            org.opencontainers.image.url=${{ fromJson(steps.get_metadata.outputs.image_metadata)['org.opencontainers.image.url'] }}
            org.opencontainers.image.documentation=${{ fromJson(steps.get_metadata.outputs.image_metadata)['org.opencontainers.image.documentation'] }}
            org.opencontainers.image.source=${{ fromJson(steps.get_metadata.outputs.image_metadata)['org.opencontainers.image.source'] }}
            org.opencontainers.image.licenses=${{ fromJson(steps.get_metadata.outputs.image_metadata)['org.opencontainers.image.licenses'] }}
            org.opencontainers.image.title=${{ fromJson(steps.get_metadata.outputs.image_metadata)['org.opencontainers.image.title'] }}
            org.opencontainers.image.description=${{ fromJson(steps.get_metadata.outputs.image_metadata)['org.opencontainers.image.description'] }}

      - name: "Build image (and publish on main branch)"
        id: "build_image"
        uses: "docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83" # v6.18.0
        with:
          annotations: |-
            ${{ steps.build_metadata.outputs.annotations }}
          cache-from: "type=gha"
          cache-to: "type=gha,mode=max"
          context: "./containers/${{ matrix.image }}"
          file: "./containers/${{ matrix.image }}/Containerfile"
          labels: |-
            ${{ steps.build_metadata.outputs.labels }}
          platforms: "${{ matrix.platform }}"
          provenance: false
          push: ${{ github.event_name != 'pull_request' }}
          tags: |-
            ${{ steps.build_metadata.outputs.tags }}

      - name: "Signing image"
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_PASSWORD: "${{ secrets.COSIGN_PASSWORD }}"
          COSIGN_PRIVATE_KEY: "${{ secrets.COSIGN_PRIVATE_KEY }}"
          COSIGN_YES: "true"
        run: |
          set -o "errexit" -o "nounset"

          IMAGE_NAME=$(
            echo "${{ fromJson(steps.build_metadata.outputs.json).tags[0] }}" \
            | cut --delimiter=":" --fields="1"
          )
          IMAGE_DIGEST="${{ steps.build_image.outputs.digest }}"

          cosign sign \
            --key="env://COSIGN_PRIVATE_KEY" \
            --recursive \
            "${IMAGE_NAME}@${IMAGE_DIGEST}"

      - name: "Attest build provenance for image"
        if: ${{ github.event_name != 'pull_request' }}
        uses: "actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a" # v3.0.0
        with:
          subject-name: "ghcr.io/${{ github.repository_owner }}/${{ fromJson(steps.get_metadata.outputs.image_metadata)['org.opencontainers.image.title'] }}"
          subject-digest: "${{ steps.build_image.outputs.digest }}"
