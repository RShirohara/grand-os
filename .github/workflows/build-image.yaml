name: "Build (OS image)"

on:
  pull_request:
    types:
      - "ready_for_review"
      - "review_requested"
    paths:
      - ".github/workflows/build-image.yaml"
      - "files/**/*"
      - "recipes/**/*"
  release:
    types: "released"

concurrency:
  group: "${{ github.workflow }}-${{ github.ref || github.run_id }}"
  cancel-in-progress: true

jobs:
  get_target:
    name: "Get build target"
    runs-on: "ubuntu-latest"

    outputs:
      recipes: "${{ steps.get_recipes.outputs.recipes }}"

    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683" # v4.2.2

      - name: "Get recipes"
        id: "get_recipes"
        run: |
          set -o "errexit" -o "nounset"

          # get recipes list
          RECIPES=$(
            find recipes/general -mindepth 1 -maxdepth 1 -type "f" -name "*.yaml" -print0 \
            | xargs --null --replace="@" basename -- "@" ".yaml" \
            | jq --null-input --raw-input --compact-output "[inputs]"
          )
          echo "recipes=${RECIPES}" | tee --append "${GITHUB_OUTPUT}"

  build:
    name: "Build (${{ matrix.recipe }}, ${{ matrix.platform }})"
    needs: "get_target"
    runs-on: "${{ matrix.runner }}"

    permissions:
      attestations: "write"
      id-token: "write"
      packages: "write"

    strategy:
      fail-fast: false
      matrix:
        recipe: ${{ fromJson(needs.get_target.outputs.recipes) }}
        include:
          - platform: "linux/amd64"
            runner: "ubuntu-latest"

    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683" # v4.2.2

      - name: "Setup Docker Buildx"
        uses: "docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2" # v3.10.0
        with:
          install: true

      - name: "Setup BlueBuild cli"
        env:
          BLUEBUILD_INSTALL_DIR: "${{ runner.temp }}/bluebuild/bin"
          BLUEBUILD_INSTALL_VERSION: "latest"
        run: |
          set -o "errexit" -o "nounset"

          mkdir --parents "${BLUEBUILD_INSTALL_DIR}"
          echo "${BLUEBUILD_INSTALL_DIR}" | tee --append "${GITHUB_PATH}"

          docker create \
            --name="blue-build-installer" \
            "ghcr.io/blue-build/cli:${BLUEBUILD_INSTALL_VERSION}-installer"
          docker cp blue-build-installer:/out/bluebuild "${BLUEBUILD_INSTALL_DIR}/bluebuild"
          docker rm blue-build-installer

          "${BLUEBUILD_INSTALL_DIR}/bluebuild" --version

      - name: "Setup cosign cli"
        uses: "sigstore/cosign-installer@d7d6bc7722e3daa8354c50bcb52f4837da5e9b6a" # v3.8.1
        with:
          install-dir: "${{ runner.temp }}/cosign/bin"

      - name: "Validate cosign key-pair"
        if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && (github.event.pull_request.user.login == github.event.repository.owner.login)) }}
        env:
          COSIGN_PASSWORD: "${{ secrets.COSIGN_PASSWORD }}"
          COSIGN_PRIVATE_KEY: "${{ secrets.COSIGN_PRIVATE_KEY }}"
          COSIGN_YES: "true"
        run: |
          set -o "errexit" -o "nounset"

          cosign public-key --key="env://COSIGN_PRIVATE_KEY" > cosign.pub
          if [[ $(git diff --name-only | grep "cosign.pub") -gt 0 ]]; then
            echo "::error title=Invalid cosign key::Failed to validate cosign key pair."
            exit 1
          fi

      - name: "Get image metadata"
        id: "get_metadata"
        run: |
          set -o "errexit" -o "nounset"

          # image name
          IMAGE_NAME=$(yq ".name" ./recipes/general/${{ matrix.recipe }}.yaml)
          echo "image_name=${IMAGE_NAME}" | tee --append "${GITHUB_OUTPUT}"

          # base image version
          VERSION_ID=$(yq ".image-version" ./recipes/general/${{ matrix.recipe }}.yaml)
          RELEASE_VERSION=$(
            grep "^RELEASE_VERSION" ./files/scripts/add-image-info.sh \
            | sed --expression="s/^.*=//g" --expression="s/\"//g"
          )
          echo "image_major_version=${VERSION_ID}" | tee --append "${GITHUB_OUTPUT}"
          echo "image_version=${VERSION_ID}.${RELEASE_VERSION}" | tee --append "${GITHUB_OUTPUT}"

          # author name
          IMAGE_AUTHORS=$(jq --raw-output '.["org.opencontainers.image.authors"]' ./recipes/general/meta.json)
          echo "image_authors=${IMAGE_AUTHORS}" | tee --append "${GITHUB_OUTPUT}"

      - name: "Build metadata"
        id: "build_metadata"
        uses: "docker/metadata-action/@369eb591f429131d6889c46b94e711f089e6ca96" # v5.6.1
        with:
          images: |-
            ghcr.io/${{ github.repository_owner }}/${{ steps.get_metadata.outputs.image_name }}
          tags: |-
            type=raw,value=${{ steps.get_metadata.outputs.image_version }}
            type=raw,value=${{ steps.get_metadata.outputs.image_major_version }}
            type=raw,value=latest
          labels: |-
            org.opencontainers.image.authors=${{ steps.get_metadata.outputs.image_authors }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README.md
            org.opencontainers.image.source=https://github.com/${{ github.repository }}/blob/main/recipes/${{ matrix.recipe }}.yaml
            org.opencontainers.image.title=${{ steps.get_metadata.outputs.image_name }}
          annotations: |-
            org.opencontainers.image.authors=${{ steps.get_metadata.outputs.image_authors }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README.md
            org.opencontainers.image.source=https://github.com/${{ github.repository }}/blob/main/recipes/${{ matrix.recipe }}.yaml
            org.opencontainers.image.title=${{ steps.get_metadata.outputs.image_name }}

      - name: "Login to GitHub Container Registry"
        uses: "docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772" # v3.4.0
        with:
          registry: "ghcr.io"
          username: "${{ github.repository_owner }}"
          password: "${{ secrets.GITHUB_TOKEN }}"

      - name: "Generate Containerfile"
        env:
          RECIPE_PATH: "./recipes/general/${{ matrix.recipe }}.yaml"
          RUST_LOG_STYLE: "always"
          CLICOLOR_FORCE: "1"
        run: |
          set -o "errexit" -o "nounset"

          bluebuild generate \
            --output="./Containerfile" \
            --platform="${{ matrix.platform }}" \
            --verbose \
            "${RECIPE_PATH}"

      - name: "Build image (and publish on release)"
        id: "build_image"
        uses: "docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4" # v6.15.0
        with:
          annotations: |-
            ${{ steps.build_metadata.outputs.annotations }}
          context: "."
          file: "./Containerfile"
          labels: |-
            ${{ steps.build_metadata.outputs.labels }}
          platforms: "${{ matrix.platform }}"
          provenance: false
          push: ${{ github.event_name == 'release' }}
          tags: |-
            ${{ steps.build_metadata.outputs.tags }}

      - name: "Signing image"
        if: ${{ github.event_name == 'release' }}
        env:
          COSIGN_PASSWORD: "${{ secrets.COSIGN_PASSWORD }}"
          COSIGN_PRIVATE_KEY: "${{ secrets.COSIGN_PRIVATE_KEY }}"
          COSIGN_YES: "true"
        run: |
          set -o "errexit" -o "nounset"

          IMAGE_NAME=$(
            echo "${{ fromJson(steps.build_metadata.outputs.json).tags[0] }}" \
            | cut --delimiter=":" --fields="1"
          )
          IMAGE_DIGEST="${{ steps.build_image.outputs.digest }}"

          cosign sign \
            --key="env://COSIGN_PRIVATE_KEY" \
            --recursive \
            "${IMAGE_NAME}@${IMAGE_DIGEST}"

      - name: "Attest build provenance for image"
        if: ${{ github.event_name == 'release' }}
        uses: "actions/attest-build-provenance@db473fddc028af60658334401dc6fa3ffd8669fd" # v2.3.0
        with:
          subject-name: "ghcr.io/${{ github.repository_owner }}/${{ steps.get_metadata.outputs.image_name }}"
          subject-digest: "${{ steps.build_image.outputs.digest }}"
