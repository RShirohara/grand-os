name: Build (OS image)

on:
  pull_request:
    types:
      - "ready_for_review"
      - "review_requested"
    paths:
      - ".github/workflows/build-image.yaml"
      - "files/**/*"
      - "modules/**/*"
      - "recipes/**/*"
  release:
    types: "released"

concurrency:
  group: "${{ github.workflow }}-${{ github.ref || github.run_id }}"

jobs:
  get_target:
    name: "Get build target"
    runs-on: "ubuntu-latest"

    outputs:
      recipes: "${{ steps.get_recipes.outputs.recipes }}"

    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4.2.2"

      - name: "Get recipes"
        id: "get_recipes"
        run: |
          set -eu

          # get recipes list
          RECIPES=$(
            find recipes -mindepth 1 -maxdepth 1 -type f -name "*.yaml" \
            | xargs -I@ basename -- "@" ".yaml" \
            | jq -cnR "[inputs]"
          )
          echo "recipes=${RECIPES}" | tee -a ${GITHUB_OUTPUT}

  build:
    name: "Build (${{ matrix.recipe }}, ${{ matrix.platform }})"
    needs: "get_target"
    runs-on: "${{ matrix.runner }}"

    permissions:
      attestations: "write"
      id-token: "write"
      packages: "write"

    strategy:
      fail-fast: false
      matrix:
        recipe: ${{ fromJson(needs.get_target.outputs.recipes) }}
        include:
          - platform: "linux/amd64"
            runner: "ubuntu-latest"

    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4.2.2"

      - name: "Setup Docker Buildx"
        uses: "docker/setup-buildx-action@v3.8.0"
        with:
          install: true

      - name: "Setup BlueBuild cli"
        env:
          CLI_VERSION: "latest"
        run: |
          set -eu

          sudo docker create \
            --name "blue-build-installer" \
            ghcr.io/blue-build/cli:${CLI_VERSION}-installer
          sudo docker cp blue-build-installer:/out/bluebuild /usr/bin/bluebuild
          sudo docker rm blue-build-installer

          bluebuild --version

      - name: "Setup cosign cli"
        uses: "sigstore/cosign-installer@v3.8.0"
        with:
          install-dir: "/usr/bin"
          use-sudo: true

      - name: "Check cosign key-pair"
        env:
          COSIGN_PASSWORD: "${{ secrets.COSIGN_PASSWORD }}"
          COSIGN_PRIVATE_KEY: "${{ secrets.COSIGN_PRIVATE_KEY }}"
          COSIGN_YES: "true"
        run: |
          set -eu

          cosign public-key --key="env://COSIGN_PRIVATE_KEY" > cosign.pub
          if [[ $(git diff --name-only | grep "cosign.pub") > 0 ]]; then
            echo "::error title=Invalid cosign key::Failed to validate cosign key pair."
            exit 1
          fi

      - name: "Get image metadata"
        id: "get_metadata"
        run: |
          set -eu

          # image name
          IMAGE_NAME=$(yq ".name" ./recipes/${{ matrix.recipe }}.yaml)
          echo "image_name=${IMAGE_NAME}" | tee -a ${GITHUB_OUTPUT}

          # base image version
          IMAGE_VERSION=$(yq ".image-version" ./recipes/${{ matrix.recipe }}.yaml)
          echo "image_version=${IMAGE_VERSION}" | tee -a ${GITHUB_OUTPUT}

          # author name
          IMAGE_AUTHORS=$(jq -r '.["org.opencontainers.image.authors"]' ./recipes/meta.json)
          echo "image_authors=${IMAGE_AUTHORS}" | tee -a ${GITHUB_OUTPUT}

      - name: "Build metadata"
        id: "build_metadata"
        uses: "docker/metadata-action/@v5.6.1"
        env:
          DOCKER_METADATA_SHORT_SHA_LENGTH: 8
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/${{ steps.get_metadata.outputs.image_name }}
          tags: |
            type=raw,value={{date 'YYYYMMDD'}},prefix=${{ steps.get_metadata.outputs.image_version }}.,enable=${{ github.event_name == 'pull_request' }}
            type=match,pattern=v(\d.\d),group=1,prefix=${{ steps.get_metadata.outputs.image_version }}.,enable=${{ github.event_name == 'release' }}
            type=raw,value=latest,enable=${{ github.event_name == 'release' }}
          labels: |
            org.opencontainers.image.authors=${{ steps.get_metadata.outputs.image_authors }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README.md
            org.opencontainers.image.source=https://github.com/${{ github.repository }}/blob/main/recipes/${{ matrix.recipe }}.yaml
            org.opencontainers.image.title=${{ steps.get_metadata.outputs.image_name }}
          annotations: |
            org.opencontainers.image.authors=${{ steps.get_metadata.outputs.image_authors }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README.md
            org.opencontainers.image.source=https://github.com/${{ github.repository }}/blob/main/recipes/${{ matrix.recipe }}.yaml
            org.opencontainers.image.title=${{ steps.get_metadata.outputs.image_name }}

      - name: "Login to GitHub Container Registry"
        uses: "docker/login-action@v3.3.0"
        with:
          registry: "ghcr.io"
          username: "${{ github.repository_owner }}"
          password: "${{ secrets.GITHUB_TOKEN }}"

      - name: "Generate Containerfile"
        env:
          RECIPE_PATH: "./recipes/${{ matrix.recipe }}.yaml"
          RUST_LOG_STYLE: "always"
          CLICOLOR_FORCE: "1"
        run: |
          set -eu

          bluebuild generate \
            --output ./Containerfile \
            --platform "${{ matrix.platform }}" \
            --verbose \
            ${RECIPE_PATH}

      - name: "Build image (and publish on release)"
        id: "build_image"
        uses: "docker/build-push-action@v6.13.0"
        with:
          annotations: |
            ${{ steps.build_metadata.outputs.annotations }}
          cache-from: "type=gha"
          cache-to: "type=gha,mode=max"
          context: "."
          file: "./Containerfile"
          labels: |
            ${{ steps.build_metadata.outputs.labels }}
          platforms: "${{ matrix.platform }}"
          push: ${{ github.event_name == 'release' }}
          tags: |
            ${{ steps.build_metadata.outputs.tags }}

      - name: "Signing image"
        if: ${{ github.event_name == 'release' }}
        env:
          COSIGN_PASSWORD: "${{ secrets.COSIGN_PASSWORD }}"
          COSIGN_PRIVATE_KEY: "${{ secrets.COSIGN_PRIVATE_KEY }}"
          COSIGN_YES: "true"
        run: |
          set -eu

          IMAGE_NAME=$(
            echo "${{ fromJson(steps.build_metadata.outputs.json).tags[0] }}" \
            | cut -d":" -f"1"
          )
          IMAGE_DIGEST="${{ steps.build_image.outputs.digest }}"

          cosign sign \
            --key="env://COSIGN_PRIVATE_KEY" \
            "${IMAGE_NAME}@${IMAGE_DIGEST}"

      - name: "Attest build provenance for image"
        if: ${{ github.event_name == 'release' }}
        uses: "actions/attest-build-provenance@v2.2.0"
        with:
          subject-name: "ghcr.io/${{ github.repository_owner }}/${{ steps.get_metadata.outputs.image_name }}"
          subject-digest: "${{ steps.build_image.outputs.digest }}"
